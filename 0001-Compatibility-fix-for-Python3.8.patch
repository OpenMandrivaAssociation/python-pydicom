From e5ccffdb771a9b3d6e511afce436e2902dd1e38b Mon Sep 17 00:00:00 2001
From: scaramallion <scaramallion@users.noreply.github.com>
Date: Thu, 22 Aug 2019 15:02:12 +1000
Subject: [PATCH] Compatibility fix for Python3.8

---
 pydicom/tests/test_valuerep.py | 36 ++++++++++++++++++++++++++++++----
 pydicom/valuerep.py            | 17 ++++++++++------
 2 files changed, 43 insertions(+), 10 deletions(-)

diff --git a/pydicom/tests/test_valuerep.py b/pydicom/tests/test_valuerep.py
index 5f1efd34..4a58873e 100644
--- a/pydicom/tests/test_valuerep.py
+++ b/pydicom/tests/test_valuerep.py
@@ -90,7 +90,6 @@ class TestDA(object):
 
 class TestDS(object):
     """Unit tests for DS values"""
-
     def test_empty_value(self):
         assert '' == DS(None)
         assert '' == DS('')
@@ -106,7 +105,6 @@ class TestDS(object):
 
 class TestDSfloat(object):
     """Unit tests for pickling DSfloat"""
-
     def test_pickling(self):
         # Check that a pickled DSFloat is read back properly
         x = pydicom.valuerep.DSfloat(9.0)
@@ -116,10 +114,25 @@ class TestDSfloat(object):
         assert x.real == x2.real
         assert x.original_string == x2.original_string
 
+    def test_str(self):
+        """Test DSfloat.__str__()."""
+        val = pydicom.valuerep.DSfloat(1.1)
+        assert '1.1' == str(val)
+
+        val = pydicom.valuerep.DSfloat('1.1')
+        assert '1.1' == str(val)
+
+    def test_repr(self):
+        """Test DSfloat.__repr__()."""
+        val = pydicom.valuerep.DSfloat(1.1)
+        assert '"1.1"' == repr(val)
+
+        val = pydicom.valuerep.DSfloat('1.1')
+        assert '"1.1"' == repr(val)
+
 
 class TestDSdecimal(object):
     """Unit tests for pickling DSdecimal"""
-
     def test_pickling(self):
         # Check that a pickled DSdecimal is read back properly
         # DSdecimal actually prefers original_string when
@@ -142,7 +155,6 @@ class TestDSdecimal(object):
 
 class TestIS(object):
     """Unit tests for IS"""
-
     def test_empty_value(self):
         assert '' == IS(None)
         assert '' == IS('')
@@ -182,6 +194,22 @@ class TestIS(object):
             pydicom.valuerep.IS(3103050000)
         config.enforce_valid_values = original_flag
 
+    def test_str(self):
+        """Test IS.__str__()."""
+        val = pydicom.valuerep.IS(1)
+        assert '1' == str(val)
+
+        val = pydicom.valuerep.IS('1')
+        assert '1' == str(val)
+
+    def test_repr(self):
+        """Test IS.__repr__()."""
+        val = pydicom.valuerep.IS(1)
+        assert '"1"' == repr(val)
+
+        val = pydicom.valuerep.IS('1')
+        assert '"1"' == repr(val)
+
 
 class TestBadValueRead(object):
     """Unit tests for handling a bad value for a VR
diff --git a/pydicom/valuerep.py b/pydicom/valuerep.py
index 49e85780..39694aaa 100644
--- a/pydicom/valuerep.py
+++ b/pydicom/valuerep.py
@@ -340,8 +340,9 @@ class DSfloat(float):
     def __str__(self):
         if hasattr(self, 'original_string'):
             return self.original_string
-        else:
-            return super(DSfloat, self).__str__()
+
+        # Issue #937 (Python 3.8 compatibility)
+        return str(float(self))
 
     def __repr__(self):
         return "\"" + str(self) + "\""
@@ -500,11 +501,15 @@ class IS(int):
         elif isinstance(val, IS) and hasattr(val, 'original_string'):
             self.original_string = val.original_string
 
-    def __repr__(self):
+    def __str__(self):
         if hasattr(self, 'original_string'):
-            return "\"" + self.original_string + "\""
-        else:
-            return "\"" + int.__str__(self) + "\""
+            return self.original_string
+
+        # Issue #937 (Python 3.8 compatibility)
+        return str(int(self))
+
+    def __repr__(self):
+        return "\"" + str(self) + "\""
 
 
 def MultiString(val, valtype=str):
-- 
2.21.0

